#/usr/bin/env python

import sys
import os
import json
from datetime import datetime


def save_config(__config__):

    with open('config/config.json', 'a') as config_:
        config_.write(json.dumps(__config__, indent=4))
    config_.close()


def make_protocols(protocol_name):

    protocols = {'config': {}}

    if not os.path.isdir('components/protocols'):

        print 'Error: components/protocols does not exist...'
        print 'You have to initialize first your project tree'
        sys.exit(1)

    def dir_exist(pname):

        if os.path.isdir('components/protocols/{}'.format(pname)):

            print 'Directory: "components/protocols/{}" exist'.format(pname)
            return True

        else:
            return False

    new_name_prompt = dir_exist(protocol_name)

    if new_name_prompt:

        new_name_prompt = raw_input('Enter your new protocol name: ')

        if not new_name_prompt:
            sys.exit(1)

        else:
            make_protocols(new_name_prompt)

    else:

        dir_ = 'components/protocols/{}'.format(proto_name)

        print 'Creating directory: {}'.format(dir_)

        try:

            os.makedirs(dir_, 0755)

        except OSError as e:

            print e

            sys.exit(1)

    while True:
        name = raw_input('Enter sub protocol name: ')

        if not name:
            break

        new_name = {name: []}
        protocols['config'].update(new_name)

        while True:

            attrib = raw_input('Enter attribute name: ')

            if not attrib:
                break

            attrib_type = raw_input('Enter attribute type [None]: ')

            protocols['config'][name].append((attrib, attrib_type or None, ))

    __all = []

    head = """
from __future__ import absolute_import

__author__ = 'NetCatKS auto generator at {}'

from zope.interface import Interface, Attribute, implementer

from NetCatKS.DProtocol import BaseProtocolActions
from NetCatKS.Dispatcher import IJSONResource
    """.format(str(datetime.now()))

    __all.append(head)

    __protos = []

    for proto, attributes in protocols.get('config').iteritems():

        __protos.append(proto)

        __interface_base = """

class I{}Interface(Interface):
        """.format(proto)

        __all.append(__interface_base)

        for name, intype in attributes:
            att_str = """
    {} = Attribute("Comments going here")
        """.format(name)

            __all.append(att_str)

        __cls_base = """

@implementer(I{}Interface)
class {}Implementer(BaseProtocolActions):

    def __init__(self, **kwargs):
        """.format(proto, proto)

        __all.append(__cls_base)

        __imp_base = ""
        __prop_names = ""
        __prop_names_set = ""

        for name, intype in attributes:

            if intype in __protos:
                intype = '{}Implementer()'.format(intype)

            __imp_base += """
        self.__{} = {}
        """.format(name, intype)

            if intype != '[]':
                __prop_names += """
    @property
    def {0}(self):
        return self.__{0}

    @{0}.setter
    def {0}(self, {0}):
        self.__{0} = {0}
            """.format(name)
            else:

                __prop_names += """
    @property
    def {0}(self):
        return self.__{0}

    @{0}.setter
    def {0}(self, {0}):
        self.__{0} = self.if_list_auto_append({0}, self.__{0})
                """.format(name)

        __all.append(__imp_base)
        __all.append(__prop_names)

        if proto == protocols.get('config').keys()[-1]:
            __main_proto = """

@implementer(IJSONResource)
class {0}Protocol({0}Implementer):
    def __init__(self, **kwargs):
        super({0}Protocol, self).__init__(**kwargs)
            """.format(proto)

            __all.append(__main_proto)

    with open('{}/__init__.py'.format(dir_), 'a') as app:
        app.write(''.join(__all))
    return


def tcp_config(tcp_conf):

    tcp_conf.update({'TCP': {
        'TCP_PORT': 8484,
        'TCP_BACK_LOG': 50,
        'TCP_SERVICE_NAME': 'Default TCP Server'
        }}
     )

    return tcp_conf


def web_config(web_conf):

    web_conf.update({'WEB': {
        'WEB_PORT': 8000,
        'WEB_ROOT': '',
        'WEB_NAME': 'Default WEB Server',
        'WEB_METHODS': ['GET']
        }}
     )

    return web_conf


def wamp_config(wamp_conf):

    wamp_conf.update({

        'WAMP': {
            'WS_PROTO': 'wss',
            'WS_IP': 'localhost',
            'WS_PORT': 8080, # integer
            'WS_REALM': 'realm1',
            'WS_PATH': 'ws',
            'WS_RETRY_INTERVAL': 2,  # in seconds
            'WS_NAME': 'Default WAMP Component',
            'WS_USER': 'wamp_ws_user',
            'WS_PASS': 'wamp_ws_password'
        }
    })

    wamp_conf.get('WAMP').update({'WS_URL': '{}://{}:{}/{}'.format(
        wamp_conf.get('WAMP').get('WS_PROTO'),
        wamp_conf.get('WAMP').get('WS_IP'),
        wamp_conf.get('WAMP').get('WS_PORT'),
        wamp_conf.get('WAMP').get('WS_PATH')
        )}
    )

    return wamp_conf


def global_sub():

    gsub = """

from NetCatKS.Components.api import IUserGlobalSubscriber
from NetCatKS.Dispatcher import IJSONResource

from zope.interface import implementer
from zope.component import adapts


@implementer(IUserGlobalSubscriber)
class GlobalSubscriberCallBack(object):

    adapts(IJSONResource)

    def __init__(self, adapt=None):
        self.adapt = adapt

    def subscribe(self):
        print 'MESSAGE FROM GLOBAL SUB CALLBACK: {}'.format(self.adapt)
    """

    with open('components/wamp/sub/__init__.py', 'a') as app:

        app.write(gsub)

    app.close()


try:
    arg = sys.argv[1]

except IndexError:
    print 'Usage:'
    print '\tnetcatks init tcp - Will produce Defaut TCP Server'
    print '\tnetcatks init mixin - Will produce Defaut TCP and WEB Server plus Default Wamp Component'
    print '\tnetcatks init wamp - Will produce Default Wamp Component'

else:

    if arg == 'init' and sys.argv[2] != 'protocol':

        dirs = [
            'components/factories',
            'components/adapters',
            'components/protocols',
            'components/utility',
            'components/validators',
            'components/wamp/rpc',
            'components/wamp/pub',
            'components/wamp/sub',
        ]

        for d in dirs:

            try:

                os.makedirs(d, 0755)
                open(d + '/__init__.py', 'a').close()

            except OSError as e:
                print e
                break

        open(d + '/../__init__.py', 'a').close()
        open('components/__init__.py', 'a').close()

        try:

            os.mkdir('config')

        except OSError as e:

            print e
            sys.exit()

__config = dict()

try:

    arg = sys.argv[2]

except IndexError:
    pass

else:

    if arg == 'wamp':

        __config.update(wamp_config(__config))

        wamp_app = """
from NetCatKS.Components import ComponentsRegistration
from NetCatKS.NetCAT import IDefaultAutobahnService, AutobahnDefaultFactory
from NetCatKS.Config import Config

components = ComponentsRegistration().init()

application = IDefaultAutobahnService(
    AutobahnDefaultFactory(config=Config().get('WAMP'))
).start()
        """

        with open('app.py', 'a') as app:

            app.write(wamp_app)

        app.close()
        save_config(__config)
        global_sub()
        print 'Projects structures was created successfully'

    elif arg == 'tcp':

        __config.update(tcp_config(__config))

        tcp_app = """
from NetCatKS.Components import ComponentsRegistration
from NetCatKS.NetCAT import DefaultFactory, IDefaultService
from NetCatKS.Config import Config

components = ComponentsRegistration().init()

application = IDefaultService(DefaultFactory(
    config=Config().get('TCP')
)).start()
        """

        with open('app.py', 'a') as app:

            app.write(tcp_app)

        app.close()
        save_config(__config)
        print 'Projects structures was created successfully'

    elif arg == 'web':

        __config.update(web_config(__config))

        web_app = """
from NetCatKS.Components import ComponentsRegistration
from NetCatKS.Config import Config
from NetCatKS.NetCAT import IDefaultWebService, DefaultWebFactory

components = ComponentsRegistration().init()

application = IDefaultWebService(
    DefaultWebFactory(config=Config().get('WEB'))
).start()
        """

        with open('app.py', 'a') as app:

            app.write(web_app)

        app.close()
        save_config(__config)
        print 'Projects structures was created successfully'

    elif arg == 'mixin':

        __config.update(wamp_config(__config))
        __config.update(tcp_config(__config))
        __config.update(web_config(__config))

        mixin_app = """
from twisted.application import service

from NetCatKS.NetCAT import IDefaultWebService, DefaultWebFactory
from NetCatKS.Components import ComponentsRegistration
from NetCatKS.NetCAT import DefaultFactory, IDefaultService
from NetCatKS.NetCAT import IDefaultAutobahnService, AutobahnDefaultFactory
from NetCatKS.Config import Config

components = ComponentsRegistration().init()

multi_service = service.MultiService()

apps = [

    IDefaultService(DefaultFactory(
        config=Config().get('TCP'),
        belong_to=multi_service
    )),

    IDefaultAutobahnService(AutobahnDefaultFactory(
        config=Config().get('WAMP'),
        belong_to=multi_service
    )),

    IDefaultWebService(DefaultWebFactory(
        config=Config().get('WEB'),
        belong_to=multi_service
    ))
]

for app in apps:
    app.start()

application = service.Application("NetCatKS DEMO")
multi_service.setServiceParent(application)
"""

        with open('app.py', 'a') as app:

            app.write(mixin_app)

        app.close()

        global_sub()
        save_config(__config)

        print 'Projects structures was created successfully'

    elif arg == 'protocol':

        try:

            proto_name = sys.argv[3]

        except IndexError:

            print 'Usage:'
            print '\tnetcatks init protocol <protocol name> - Will produce a input screen'

            sys.exit(1)

        else:
            make_protocols(proto_name)

    else:
        print 'Incorrect parameter'
